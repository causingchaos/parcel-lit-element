{"id":"KZIM","dependencies":[{"name":"C:\\Users\\justinberry\\Desktop\\parcel-lit-element\\package.json","includedInParent":true,"mtime":1604449638600},{"name":"C:\\Users\\justinberry\\Desktop\\parcel-lit-element\\node_modules\\@polymer\\polymer\\package.json","includedInParent":true,"mtime":1604392834024},{"name":"../mixins/mutable-data.js","loc":{"line":10,"column":28},"parent":"C:\\Users\\justinberry\\Desktop\\parcel-lit-element\\node_modules\\@polymer\\polymer\\lib\\legacy\\mutable-data-behavior.js","resolved":"C:\\Users\\justinberry\\Desktop\\parcel-lit-element\\node_modules\\@polymer\\polymer\\lib\\mixins\\mutable-data.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.OptionalMutableDataBehavior=exports.MutableDataBehavior=void 0;var e=require(\"../mixins/mutable-data.js\");let t;t=e.MutableData._mutablePropertyChange;const a={_shouldPropertyChange(e,a,r){return t(this,e,a,r,!0)}};exports.MutableDataBehavior=a;const r={properties:{mutableData:Boolean},_shouldPropertyChange(e,a,r){return t(this,e,a,r,this.mutableData)}};exports.OptionalMutableDataBehavior=r;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":0}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":13}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":20}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":35}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":43}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":56}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":57}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":64}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":68}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":76}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":104}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":112}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":137}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":10,"column":0},"generated":{"line":1,"column":139}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":10,"column":0},"generated":{"line":1,"column":143}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":10,"column":0},"generated":{"line":1,"column":145}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":10,"column":0},"generated":{"line":1,"column":153}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":12,"column":0},"generated":{"line":1,"column":182}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"mutablePropertyChange","original":{"line":12,"column":4},"generated":{"line":1,"column":186}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"mutablePropertyChange","original":{"line":15,"column":2},"generated":{"line":1,"column":188}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"MutableData","original":{"line":15,"column":26},"generated":{"line":1,"column":190}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"_mutablePropertyChange","original":{"line":15,"column":38},"generated":{"line":1,"column":192}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"_mutablePropertyChange","original":{"line":15,"column":38},"generated":{"line":1,"column":204}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":55,"column":7},"generated":{"line":1,"column":227}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"MutableDataBehavior","original":{"line":55,"column":13},"generated":{"line":1,"column":233}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":55,"column":35},"generated":{"line":1,"column":235}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"_shouldPropertyChange","original":{"line":75,"column":2},"generated":{"line":1,"column":236}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"property","original":{"line":75,"column":24},"generated":{"line":1,"column":258}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"value","original":{"line":75,"column":34},"generated":{"line":1,"column":260}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"old","original":{"line":75,"column":41},"generated":{"line":1,"column":262}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"mutablePropertyChange","original":{"line":76,"column":11},"generated":{"line":1,"column":265}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"mutablePropertyChange","original":{"line":76,"column":11},"generated":{"line":1,"column":272}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":33},"generated":{"line":1,"column":274}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"property","original":{"line":76,"column":39},"generated":{"line":1,"column":279}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"value","original":{"line":76,"column":49},"generated":{"line":1,"column":281}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"old","original":{"line":76,"column":56},"generated":{"line":1,"column":283}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":76,"column":61},"generated":{"line":1,"column":286}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":291}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":299}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":319}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":321}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"OptionalMutableDataBehavior","original":{"line":119,"column":13},"generated":{"line":1,"column":327}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":43},"generated":{"line":1,"column":329}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"properties","original":{"line":121,"column":2},"generated":{"line":1,"column":330}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":121,"column":14},"generated":{"line":1,"column":341}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"mutableData","original":{"line":127,"column":4},"generated":{"line":1,"column":342}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"Boolean","original":{"line":127,"column":17},"generated":{"line":1,"column":354}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"_shouldPropertyChange","original":{"line":148,"column":2},"generated":{"line":1,"column":363}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"property","original":{"line":148,"column":24},"generated":{"line":1,"column":385}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"value","original":{"line":148,"column":34},"generated":{"line":1,"column":387}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"old","original":{"line":148,"column":41},"generated":{"line":1,"column":389}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"mutablePropertyChange","original":{"line":149,"column":11},"generated":{"line":1,"column":392}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"mutablePropertyChange","original":{"line":149,"column":11},"generated":{"line":1,"column":399}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":33},"generated":{"line":1,"column":401}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"property","original":{"line":149,"column":39},"generated":{"line":1,"column":406}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"value","original":{"line":149,"column":49},"generated":{"line":1,"column":408}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"old","original":{"line":149,"column":56},"generated":{"line":1,"column":410}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":149,"column":61},"generated":{"line":1,"column":412}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","name":"mutableData","original":{"line":149,"column":66},"generated":{"line":1,"column":417}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":432}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":440}},{"source":"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js","original":{"line":119,"column":7},"generated":{"line":1,"column":468}}],"sources":{"../node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { MutableData } from '../mixins/mutable-data.js';\n\nlet mutablePropertyChange;\n/** @suppress {missingProperties} */\n(() => {\n  mutablePropertyChange = MutableData._mutablePropertyChange;\n})();\n\n/**\n * Legacy element behavior to skip strict dirty-checking for objects and arrays,\n * (always consider them to be \"dirty\") for use on legacy API Polymer elements.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will cause Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must apply this behavior or enable the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * In order to make the dirty check strategy configurable, see\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse as opposed to using strict dirty checking with immutable\n * patterns or Polymer's path notification API.\n *\n * @polymerBehavior\n * @summary Behavior to skip strict dirty-checking for objects and\n *   arrays\n */\nexport const MutableDataBehavior = {\n\n  /**\n   * Overrides `Polymer.PropertyEffects` to provide option for skipping\n   * strict equality checking for Objects and Arrays.\n   *\n   * This method pulls the value to dirty check against from the `__dataTemp`\n   * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, true);\n  }\n};\n\n/**\n * Legacy element behavior to add the optional ability to skip strict\n * dirty-checking for objects and arrays (always consider them to be\n * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will allow Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must enable this behavior or apply the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * While this behavior adds the ability to forgo Object/Array dirty checking,\n * the `mutableData` flag defaults to false and must be set on the instance.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse by relying on `mutableData: true` as opposed to using\n * strict dirty checking with immutable patterns or Polymer's path notification\n * API.\n *\n * @polymerBehavior\n * @summary Behavior to optionally skip strict dirty-checking for objects and\n *   arrays\n */\nexport const OptionalMutableDataBehavior = {\n\n  properties: {\n    /**\n     * Instance-level flag for configuring the dirty-checking strategy\n     * for this element.  When true, Objects and Arrays will skip dirty\n     * checking, otherwise strict equality checking will be used.\n     */\n    mutableData: Boolean\n  },\n\n  /**\n   * Overrides `Polymer.PropertyEffects` to skip strict equality checking\n   * for Objects and Arrays.\n   *\n   * Pulls the value to dirty check against from the `__dataTemp` cache\n   * (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, this.mutableData);\n  }\n};\n"},"lineCount":null}},"error":null,"hash":"a6664b014d3ff9b24f05f5ef0c1fd90f","cacheData":{"env":{}}}