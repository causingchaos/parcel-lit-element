{"id":"VGqi","dependencies":[{"name":"C:\\Users\\justinberry\\Desktop\\parcel-lit-element\\package.json","includedInParent":true,"mtime":1604449638600},{"name":"C:\\Users\\justinberry\\Desktop\\parcel-lit-element\\node_modules\\@polymer\\polymer\\package.json","includedInParent":true,"mtime":1604392834024},{"name":"../utils/mixin.js","loc":{"line":10,"column":30},"parent":"C:\\Users\\justinberry\\Desktop\\parcel-lit-element\\node_modules\\@polymer\\polymer\\lib\\mixins\\mutable-data.js","resolved":"C:\\Users\\justinberry\\Desktop\\parcel-lit-element\\node_modules\\@polymer\\polymer\\lib\\utils\\mixin.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.OptionalMutableData=exports.MutableData=void 0;var t=require(\"../utils/mixin.js\");function e(t,e,a,r,n){let s;n&&(s=\"object\"==typeof a&&null!==a)&&(r=t.__dataTemp[e]);let u=r!==a&&(r==r||a==a);return s&&u&&(t.__dataTemp[e]=a),u}const a=(0,t.dedupingMixin)(t=>{return class extends t{_shouldPropertyChange(t,a,r){return e(this,t,a,r,!0)}}});exports.MutableData=a;const r=(0,t.dedupingMixin)(t=>{return class extends t{static get properties(){return{mutableData:Boolean}}_shouldPropertyChange(t,a,r){return e(this,t,a,r,this.mutableData)}}});exports.OptionalMutableData=r,a._mutablePropertyChange=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":13}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":20}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":35}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":43}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":56}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":57}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":64}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":68}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":76}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":96}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":104}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":121}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":10,"column":0},"generated":{"line":1,"column":123}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":10,"column":0},"generated":{"line":1,"column":127}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":10,"column":0},"generated":{"line":1,"column":129}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":10,"column":0},"generated":{"line":1,"column":137}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":13,"column":0},"generated":{"line":1,"column":158}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"mutablePropertyChange","original":{"line":13,"column":9},"generated":{"line":1,"column":167}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"inst","original":{"line":13,"column":31},"generated":{"line":1,"column":169}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"property","original":{"line":13,"column":37},"generated":{"line":1,"column":171}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"value","original":{"line":13,"column":47},"generated":{"line":1,"column":173}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"old","original":{"line":13,"column":54},"generated":{"line":1,"column":175}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"mutableData","original":{"line":13,"column":59},"generated":{"line":1,"column":177}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"isObject","original":{"line":14,"column":6},"generated":{"line":1,"column":180}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"isObject","original":{"line":14,"column":6},"generated":{"line":1,"column":184}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"mutableData","original":{"line":15,"column":6},"generated":{"line":1,"column":186}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"isObject","original":{"line":16,"column":4},"generated":{"line":1,"column":190}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":16,"column":33},"generated":{"line":1,"column":192}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"value","original":{"line":16,"column":23},"generated":{"line":1,"column":209}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":16,"column":55},"generated":{"line":1,"column":212}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"value","original":{"line":16,"column":45},"generated":{"line":1,"column":219}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"old","original":{"line":19,"column":6},"generated":{"line":1,"column":224}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"inst","original":{"line":19,"column":12},"generated":{"line":1,"column":226}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"__dataTemp","original":{"line":19,"column":17},"generated":{"line":1,"column":228}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"property","original":{"line":19,"column":28},"generated":{"line":1,"column":239}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"shouldChange","original":{"line":23,"column":6},"generated":{"line":1,"column":243}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"shouldChange","original":{"line":23,"column":6},"generated":{"line":1,"column":247}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"old","original":{"line":23,"column":22},"generated":{"line":1,"column":249}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"value","original":{"line":23,"column":30},"generated":{"line":1,"column":253}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"old","original":{"line":23,"column":40},"generated":{"line":1,"column":257}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"old","original":{"line":23,"column":48},"generated":{"line":1,"column":260}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"value","original":{"line":23,"column":55},"generated":{"line":1,"column":263}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"value","original":{"line":23,"column":65},"generated":{"line":1,"column":266}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"shouldChange","original":{"line":29,"column":9},"generated":{"line":1,"column":269}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"isObject","original":{"line":26,"column":6},"generated":{"line":1,"column":276}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"shouldChange","original":{"line":26,"column":18},"generated":{"line":1,"column":279}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"inst","original":{"line":27,"column":4},"generated":{"line":1,"column":283}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"__dataTemp","original":{"line":27,"column":9},"generated":{"line":1,"column":285}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"property","original":{"line":27,"column":20},"generated":{"line":1,"column":296}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"value","original":{"line":27,"column":32},"generated":{"line":1,"column":299}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"shouldChange","original":{"line":29,"column":9},"generated":{"line":1,"column":302}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":74,"column":7},"generated":{"line":1,"column":304}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"MutableData","original":{"line":74,"column":13},"generated":{"line":1,"column":310}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":74,"column":27},"generated":{"line":1,"column":313}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"superClass","original":{"line":74,"column":41},"generated":{"line":1,"column":315}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"superClass","original":{"line":74,"column":41},"generated":{"line":1,"column":317}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"superClass","original":{"line":74,"column":41},"generated":{"line":1,"column":332}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"MutableData","original":{"line":105,"column":9},"generated":{"line":1,"column":336}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"MutableData","original":{"line":81,"column":8},"generated":{"line":1,"column":343}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"superClass","original":{"line":81,"column":28},"generated":{"line":1,"column":357}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"_shouldPropertyChange","original":{"line":99,"column":4},"generated":{"line":1,"column":359}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"property","original":{"line":99,"column":26},"generated":{"line":1,"column":381}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"value","original":{"line":99,"column":36},"generated":{"line":1,"column":383}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"old","original":{"line":99,"column":43},"generated":{"line":1,"column":385}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"mutablePropertyChange","original":{"line":100,"column":13},"generated":{"line":1,"column":388}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"mutablePropertyChange","original":{"line":100,"column":13},"generated":{"line":1,"column":395}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":100,"column":35},"generated":{"line":1,"column":397}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"property","original":{"line":100,"column":41},"generated":{"line":1,"column":402}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"value","original":{"line":100,"column":51},"generated":{"line":1,"column":404}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"old","original":{"line":100,"column":58},"generated":{"line":1,"column":406}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":100,"column":63},"generated":{"line":1,"column":409}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":416}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":424}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":436}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":149,"column":7},"generated":{"line":1,"column":438}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"OptionalMutableData","original":{"line":149,"column":13},"generated":{"line":1,"column":444}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":149,"column":35},"generated":{"line":1,"column":447}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"superClass","original":{"line":149,"column":49},"generated":{"line":1,"column":449}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"superClass","original":{"line":149,"column":49},"generated":{"line":1,"column":451}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"superClass","original":{"line":149,"column":49},"generated":{"line":1,"column":466}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"OptionalMutableData","original":{"line":193,"column":9},"generated":{"line":1,"column":470}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"OptionalMutableData","original":{"line":156,"column":8},"generated":{"line":1,"column":477}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"superClass","original":{"line":156,"column":36},"generated":{"line":1,"column":491}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"properties","original":{"line":159,"column":15},"generated":{"line":1,"column":493}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":160,"column":13},"generated":{"line":1,"column":517}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":160,"column":13},"generated":{"line":1,"column":523}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"mutableData","original":{"line":166,"column":8},"generated":{"line":1,"column":524}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"Boolean","original":{"line":166,"column":21},"generated":{"line":1,"column":536}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"_shouldPropertyChange","original":{"line":188,"column":4},"generated":{"line":1,"column":545}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"property","original":{"line":188,"column":26},"generated":{"line":1,"column":567}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"value","original":{"line":188,"column":36},"generated":{"line":1,"column":569}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"old","original":{"line":188,"column":43},"generated":{"line":1,"column":571}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"mutablePropertyChange","original":{"line":189,"column":13},"generated":{"line":1,"column":574}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"mutablePropertyChange","original":{"line":189,"column":13},"generated":{"line":1,"column":581}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":189,"column":35},"generated":{"line":1,"column":583}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"property","original":{"line":189,"column":41},"generated":{"line":1,"column":588}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"value","original":{"line":189,"column":51},"generated":{"line":1,"column":590}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"old","original":{"line":189,"column":58},"generated":{"line":1,"column":592}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":189,"column":63},"generated":{"line":1,"column":594}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"mutableData","original":{"line":189,"column":68},"generated":{"line":1,"column":599}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":616}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":624}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","original":{"line":198,"column":0},"generated":{"line":1,"column":644}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"MutableData","original":{"line":198,"column":0},"generated":{"line":1,"column":646}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"_mutablePropertyChange","original":{"line":198,"column":12},"generated":{"line":1,"column":648}},{"source":"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js","name":"mutablePropertyChange","original":{"line":198,"column":37},"generated":{"line":1,"column":671}}],"sources":{"../node_modules/@polymer/polymer/lib/mixins/mutable-data.js":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// Common implementation for mixin & behavior\nfunction mutablePropertyChange(inst, property, value, old, mutableData) {\n  let isObject;\n  if (mutableData) {\n    isObject = (typeof value === 'object' && value !== null);\n    // Pull `old` for Objects from temp cache, but treat `null` as a primitive\n    if (isObject) {\n      old = inst.__dataTemp[property];\n    }\n  }\n  // Strict equality check, but return false for NaN===NaN\n  let shouldChange = (old !== value && (old === old || value === value));\n  // Objects are stored in temporary cache (cleared at end of\n  // turn), which is used for dirty-checking\n  if (isObject && shouldChange) {\n    inst.__dataTemp[property] = value;\n  }\n  return shouldChange;\n}\n\n/**\n * Element class mixin to skip strict dirty-checking for objects and arrays\n * (always consider them to be \"dirty\"), for use on elements utilizing\n * `PropertyEffects`\n *\n * By default, `PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will cause Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must apply this mixin or enable the\n * `OptionalMutableData` mixin.\n *\n * In order to make the dirty check strategy configurable, see\n * `OptionalMutableData`.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse as opposed to using strict dirty checking with immutable\n * patterns or Polymer's path notification API.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin to skip strict dirty-checking for objects\n *   and arrays\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const MutableData = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_MutableData}\n   */\n  class MutableData extends superClass {\n    /**\n     * Overrides `PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * This method pulls the value to dirty check against from the `__dataTemp`\n     * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, true);\n    }\n\n  }\n\n  return MutableData;\n\n});\n\n/**\n * Element class mixin to add the optional ability to skip strict\n * dirty-checking for objects and arrays (always consider them to be\n * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n *\n * By default, `PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will allow Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must enable this mixin or apply the\n * `MutableData` mixin.\n *\n * While this mixin adds the ability to forgo Object/Array dirty checking,\n * the `mutableData` flag defaults to false and must be set on the instance.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse by relying on `mutableData: true` as opposed to using\n * strict dirty checking with immutable patterns or Polymer's path notification\n * API.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin to optionally skip strict dirty-checking\n *   for objects and arrays\n */\nexport const OptionalMutableData = dedupingMixin(superClass => {\n\n  /**\n   * @mixinClass\n   * @polymer\n   * @implements {Polymer_OptionalMutableData}\n   */\n  class OptionalMutableData extends superClass {\n\n    /** @nocollapse */\n    static get properties() {\n      return {\n        /**\n         * Instance-level flag for configuring the dirty-checking strategy\n         * for this element.  When true, Objects and Arrays will skip dirty\n         * checking, otherwise strict equality checking will be used.\n         */\n        mutableData: Boolean\n      };\n    }\n\n    /**\n     * Overrides `PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * When `this.mutableData` is true on this instance, this method\n     * pulls the value to dirty check against from the `__dataTemp` cache\n     * (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, this.mutableData);\n    }\n  }\n\n  return OptionalMutableData;\n\n});\n\n// Export for use by legacy behavior\nMutableData._mutablePropertyChange = mutablePropertyChange;\n"},"lineCount":null}},"error":null,"hash":"55836154cc1465c29732a6d231ec4ed3","cacheData":{"env":{}}}